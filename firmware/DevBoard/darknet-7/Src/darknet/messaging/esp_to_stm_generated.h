// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ESPTOSTM_DARKNET7_H_
#define FLATBUFFERS_GENERATED_ESPTOSTM_DARKNET7_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace darknet7 {

struct NPCInteractionResponse;

struct GenericResponse;

struct WiFiScanResult;

struct WiFiScanResults;

struct Badge;

struct BadgesInArea;

struct BLEInfectionData;

struct CommunicationStatusResponse;

struct ESPSystemInfo;

struct ESPToSTM;

enum RESPONSE_SUCCESS {
  RESPONSE_SUCCESS_False = 0,
  RESPONSE_SUCCESS_True = 1,
  RESPONSE_SUCCESS_MIN = RESPONSE_SUCCESS_False,
  RESPONSE_SUCCESS_MAX = RESPONSE_SUCCESS_True
};

inline const RESPONSE_SUCCESS (&EnumValuesRESPONSE_SUCCESS())[2] {
  static const RESPONSE_SUCCESS values[] = {
    RESPONSE_SUCCESS_False,
    RESPONSE_SUCCESS_True
  };
  return values;
}

inline const char * const *EnumNamesRESPONSE_SUCCESS() {
  static const char * const names[] = {
    "False",
    "True",
    nullptr
  };
  return names;
}

inline const char *EnumNameRESPONSE_SUCCESS(RESPONSE_SUCCESS e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesRESPONSE_SUCCESS()[index];
}

enum ESPToSTMAny {
  ESPToSTMAny_NONE = 0,
  ESPToSTMAny_GenericResponse = 1,
  ESPToSTMAny_ESPSystemInfo = 2,
  ESPToSTMAny_BLEInfectionData = 3,
  ESPToSTMAny_CommunicationStatusResponse = 4,
  ESPToSTMAny_WiFiScanResults = 5,
  ESPToSTMAny_NPCInteractionResponse = 6,
  ESPToSTMAny_BadgesInArea = 7,
  ESPToSTMAny_MIN = ESPToSTMAny_NONE,
  ESPToSTMAny_MAX = ESPToSTMAny_BadgesInArea
};

inline const ESPToSTMAny (&EnumValuesESPToSTMAny())[8] {
  static const ESPToSTMAny values[] = {
    ESPToSTMAny_NONE,
    ESPToSTMAny_GenericResponse,
    ESPToSTMAny_ESPSystemInfo,
    ESPToSTMAny_BLEInfectionData,
    ESPToSTMAny_CommunicationStatusResponse,
    ESPToSTMAny_WiFiScanResults,
    ESPToSTMAny_NPCInteractionResponse,
    ESPToSTMAny_BadgesInArea
  };
  return values;
}

inline const char * const *EnumNamesESPToSTMAny() {
  static const char * const names[] = {
    "NONE",
    "GenericResponse",
    "ESPSystemInfo",
    "BLEInfectionData",
    "CommunicationStatusResponse",
    "WiFiScanResults",
    "NPCInteractionResponse",
    "BadgesInArea",
    nullptr
  };
  return names;
}

inline const char *EnumNameESPToSTMAny(ESPToSTMAny e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesESPToSTMAny()[index];
}

template<typename T> struct ESPToSTMAnyTraits {
  static const ESPToSTMAny enum_value = ESPToSTMAny_NONE;
};

template<> struct ESPToSTMAnyTraits<GenericResponse> {
  static const ESPToSTMAny enum_value = ESPToSTMAny_GenericResponse;
};

template<> struct ESPToSTMAnyTraits<ESPSystemInfo> {
  static const ESPToSTMAny enum_value = ESPToSTMAny_ESPSystemInfo;
};

template<> struct ESPToSTMAnyTraits<BLEInfectionData> {
  static const ESPToSTMAny enum_value = ESPToSTMAny_BLEInfectionData;
};

template<> struct ESPToSTMAnyTraits<CommunicationStatusResponse> {
  static const ESPToSTMAny enum_value = ESPToSTMAny_CommunicationStatusResponse;
};

template<> struct ESPToSTMAnyTraits<WiFiScanResults> {
  static const ESPToSTMAny enum_value = ESPToSTMAny_WiFiScanResults;
};

template<> struct ESPToSTMAnyTraits<NPCInteractionResponse> {
  static const ESPToSTMAny enum_value = ESPToSTMAny_NPCInteractionResponse;
};

template<> struct ESPToSTMAnyTraits<BadgesInArea> {
  static const ESPToSTMAny enum_value = ESPToSTMAny_BadgesInArea;
};

bool VerifyESPToSTMAny(flatbuffers::Verifier &verifier, const void *obj, ESPToSTMAny type);
bool VerifyESPToSTMAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

enum WiFiStatus {
  WiFiStatus_AP = 0,
  WiFiStatus_AP_STA = 1,
  WiFiStatus_DOWN = 2,
  WiFiStatus_MIN = WiFiStatus_AP,
  WiFiStatus_MAX = WiFiStatus_DOWN
};

inline const WiFiStatus (&EnumValuesWiFiStatus())[3] {
  static const WiFiStatus values[] = {
    WiFiStatus_AP,
    WiFiStatus_AP_STA,
    WiFiStatus_DOWN
  };
  return values;
}

inline const char * const *EnumNamesWiFiStatus() {
  static const char * const names[] = {
    "AP",
    "AP_STA",
    "DOWN",
    nullptr
  };
  return names;
}

inline const char *EnumNameWiFiStatus(WiFiStatus e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesWiFiStatus()[index];
}

struct NPCInteractionResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MESSAGE = 4,
    VT_ACTIONS = 6
  };
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *actions() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_ACTIONS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.Verify(message()) &&
           VerifyOffset(verifier, VT_ACTIONS) &&
           verifier.Verify(actions()) &&
           verifier.VerifyVectorOfStrings(actions()) &&
           verifier.EndTable();
  }
};

struct NPCInteractionResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(NPCInteractionResponse::VT_MESSAGE, message);
  }
  void add_actions(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> actions) {
    fbb_.AddOffset(NPCInteractionResponse::VT_ACTIONS, actions);
  }
  explicit NPCInteractionResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  NPCInteractionResponseBuilder &operator=(const NPCInteractionResponseBuilder &);
  flatbuffers::Offset<NPCInteractionResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NPCInteractionResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<NPCInteractionResponse> CreateNPCInteractionResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> message = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> actions = 0) {
  NPCInteractionResponseBuilder builder_(_fbb);
  builder_.add_actions(actions);
  builder_.add_message(message);
  return builder_.Finish();
}

inline flatbuffers::Offset<NPCInteractionResponse> CreateNPCInteractionResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *message = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *actions = nullptr) {
  return darknet7::CreateNPCInteractionResponse(
      _fbb,
      message ? _fbb.CreateString(message) : 0,
      actions ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*actions) : 0);
}

struct GenericResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SUCCESSFUL = 4,
    VT_MESSAGE = 6
  };
  RESPONSE_SUCCESS successful() const {
    return static_cast<RESPONSE_SUCCESS>(GetField<int8_t>(VT_SUCCESSFUL, 0));
  }
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_SUCCESSFUL) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.Verify(message()) &&
           verifier.EndTable();
  }
};

struct GenericResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_successful(RESPONSE_SUCCESS successful) {
    fbb_.AddElement<int8_t>(GenericResponse::VT_SUCCESSFUL, static_cast<int8_t>(successful), 0);
  }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(GenericResponse::VT_MESSAGE, message);
  }
  explicit GenericResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GenericResponseBuilder &operator=(const GenericResponseBuilder &);
  flatbuffers::Offset<GenericResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GenericResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<GenericResponse> CreateGenericResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    RESPONSE_SUCCESS successful = RESPONSE_SUCCESS_False,
    flatbuffers::Offset<flatbuffers::String> message = 0) {
  GenericResponseBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_successful(successful);
  return builder_.Finish();
}

inline flatbuffers::Offset<GenericResponse> CreateGenericResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    RESPONSE_SUCCESS successful = RESPONSE_SUCCESS_False,
    const char *message = nullptr) {
  return darknet7::CreateGenericResponse(
      _fbb,
      successful,
      message ? _fbb.CreateString(message) : 0);
}

struct WiFiScanResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SSID = 4,
    VT_AUTHMODE = 6
  };
  const flatbuffers::String *ssid() const {
    return GetPointer<const flatbuffers::String *>(VT_SSID);
  }
  WifiMode authMode() const {
    return static_cast<WifiMode>(GetField<int8_t>(VT_AUTHMODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SSID) &&
           verifier.Verify(ssid()) &&
           VerifyField<int8_t>(verifier, VT_AUTHMODE) &&
           verifier.EndTable();
  }
};

struct WiFiScanResultBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ssid(flatbuffers::Offset<flatbuffers::String> ssid) {
    fbb_.AddOffset(WiFiScanResult::VT_SSID, ssid);
  }
  void add_authMode(WifiMode authMode) {
    fbb_.AddElement<int8_t>(WiFiScanResult::VT_AUTHMODE, static_cast<int8_t>(authMode), 0);
  }
  explicit WiFiScanResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WiFiScanResultBuilder &operator=(const WiFiScanResultBuilder &);
  flatbuffers::Offset<WiFiScanResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WiFiScanResult>(end);
    return o;
  }
};

inline flatbuffers::Offset<WiFiScanResult> CreateWiFiScanResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> ssid = 0,
    WifiMode authMode = WifiMode_UNKNOWN) {
  WiFiScanResultBuilder builder_(_fbb);
  builder_.add_ssid(ssid);
  builder_.add_authMode(authMode);
  return builder_.Finish();
}

inline flatbuffers::Offset<WiFiScanResult> CreateWiFiScanResultDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *ssid = nullptr,
    WifiMode authMode = WifiMode_UNKNOWN) {
  return darknet7::CreateWiFiScanResult(
      _fbb,
      ssid ? _fbb.CreateString(ssid) : 0,
      authMode);
}

struct WiFiScanResults FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_APS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<WiFiScanResult>> *APs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<WiFiScanResult>> *>(VT_APS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_APS) &&
           verifier.Verify(APs()) &&
           verifier.VerifyVectorOfTables(APs()) &&
           verifier.EndTable();
  }
};

struct WiFiScanResultsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_APs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<WiFiScanResult>>> APs) {
    fbb_.AddOffset(WiFiScanResults::VT_APS, APs);
  }
  explicit WiFiScanResultsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WiFiScanResultsBuilder &operator=(const WiFiScanResultsBuilder &);
  flatbuffers::Offset<WiFiScanResults> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WiFiScanResults>(end);
    return o;
  }
};

inline flatbuffers::Offset<WiFiScanResults> CreateWiFiScanResults(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<WiFiScanResult>>> APs = 0) {
  WiFiScanResultsBuilder builder_(_fbb);
  builder_.add_APs(APs);
  return builder_.Finish();
}

inline flatbuffers::Offset<WiFiScanResults> CreateWiFiScanResultsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<WiFiScanResult>> *APs = nullptr) {
  return darknet7::CreateWiFiScanResults(
      _fbb,
      APs ? _fbb.CreateVector<flatbuffers::Offset<WiFiScanResult>>(*APs) : 0);
}

struct Badge FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_ADDRESS = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *address() const {
    return GetPointer<const flatbuffers::String *>(VT_ADDRESS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_ADDRESS) &&
           verifier.Verify(address()) &&
           verifier.EndTable();
  }
};

struct BadgeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Badge::VT_NAME, name);
  }
  void add_address(flatbuffers::Offset<flatbuffers::String> address) {
    fbb_.AddOffset(Badge::VT_ADDRESS, address);
  }
  explicit BadgeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BadgeBuilder &operator=(const BadgeBuilder &);
  flatbuffers::Offset<Badge> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Badge>(end);
    return o;
  }
};

inline flatbuffers::Offset<Badge> CreateBadge(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> address = 0) {
  BadgeBuilder builder_(_fbb);
  builder_.add_address(address);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Badge> CreateBadgeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *address = nullptr) {
  return darknet7::CreateBadge(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      address ? _fbb.CreateString(address) : 0);
}

struct BadgesInArea FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_BADGELIST = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Badge>> *BadgeList() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Badge>> *>(VT_BADGELIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BADGELIST) &&
           verifier.Verify(BadgeList()) &&
           verifier.VerifyVectorOfTables(BadgeList()) &&
           verifier.EndTable();
  }
};

struct BadgesInAreaBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_BadgeList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Badge>>> BadgeList) {
    fbb_.AddOffset(BadgesInArea::VT_BADGELIST, BadgeList);
  }
  explicit BadgesInAreaBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BadgesInAreaBuilder &operator=(const BadgesInAreaBuilder &);
  flatbuffers::Offset<BadgesInArea> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BadgesInArea>(end);
    return o;
  }
};

inline flatbuffers::Offset<BadgesInArea> CreateBadgesInArea(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Badge>>> BadgeList = 0) {
  BadgesInAreaBuilder builder_(_fbb);
  builder_.add_BadgeList(BadgeList);
  return builder_.Finish();
}

inline flatbuffers::Offset<BadgesInArea> CreateBadgesInAreaDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Badge>> *BadgeList = nullptr) {
  return darknet7::CreateBadgesInArea(
      _fbb,
      BadgeList ? _fbb.CreateVector<flatbuffers::Offset<Badge>>(*BadgeList) : 0);
}

struct BLEInfectionData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_INFECTIONS = 4,
    VT_EXPOSURES = 6,
    VT_CURES = 8
  };
  uint16_t infections() const {
    return GetField<uint16_t>(VT_INFECTIONS, 0);
  }
  uint16_t exposures() const {
    return GetField<uint16_t>(VT_EXPOSURES, 0);
  }
  uint16_t cures() const {
    return GetField<uint16_t>(VT_CURES, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_INFECTIONS) &&
           VerifyField<uint16_t>(verifier, VT_EXPOSURES) &&
           VerifyField<uint16_t>(verifier, VT_CURES) &&
           verifier.EndTable();
  }
};

struct BLEInfectionDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_infections(uint16_t infections) {
    fbb_.AddElement<uint16_t>(BLEInfectionData::VT_INFECTIONS, infections, 0);
  }
  void add_exposures(uint16_t exposures) {
    fbb_.AddElement<uint16_t>(BLEInfectionData::VT_EXPOSURES, exposures, 0);
  }
  void add_cures(uint16_t cures) {
    fbb_.AddElement<uint16_t>(BLEInfectionData::VT_CURES, cures, 0);
  }
  explicit BLEInfectionDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BLEInfectionDataBuilder &operator=(const BLEInfectionDataBuilder &);
  flatbuffers::Offset<BLEInfectionData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BLEInfectionData>(end);
    return o;
  }
};

inline flatbuffers::Offset<BLEInfectionData> CreateBLEInfectionData(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t infections = 0,
    uint16_t exposures = 0,
    uint16_t cures = 0) {
  BLEInfectionDataBuilder builder_(_fbb);
  builder_.add_cures(cures);
  builder_.add_exposures(exposures);
  builder_.add_infections(infections);
  return builder_.Finish();
}

struct CommunicationStatusResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_WIFISTATUS = 4,
    VT_BLEADVERTISE = 6,
    VT_BLEDEVICENAME = 8
  };
  WiFiStatus WifiStatus() const {
    return static_cast<WiFiStatus>(GetField<int8_t>(VT_WIFISTATUS, 0));
  }
  bool BLEAdvertise() const {
    return GetField<uint8_t>(VT_BLEADVERTISE, 0) != 0;
  }
  const flatbuffers::String *BLEDeviceName() const {
    return GetPointer<const flatbuffers::String *>(VT_BLEDEVICENAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_WIFISTATUS) &&
           VerifyField<uint8_t>(verifier, VT_BLEADVERTISE) &&
           VerifyOffset(verifier, VT_BLEDEVICENAME) &&
           verifier.Verify(BLEDeviceName()) &&
           verifier.EndTable();
  }
};

struct CommunicationStatusResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_WifiStatus(WiFiStatus WifiStatus) {
    fbb_.AddElement<int8_t>(CommunicationStatusResponse::VT_WIFISTATUS, static_cast<int8_t>(WifiStatus), 0);
  }
  void add_BLEAdvertise(bool BLEAdvertise) {
    fbb_.AddElement<uint8_t>(CommunicationStatusResponse::VT_BLEADVERTISE, static_cast<uint8_t>(BLEAdvertise), 0);
  }
  void add_BLEDeviceName(flatbuffers::Offset<flatbuffers::String> BLEDeviceName) {
    fbb_.AddOffset(CommunicationStatusResponse::VT_BLEDEVICENAME, BLEDeviceName);
  }
  explicit CommunicationStatusResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CommunicationStatusResponseBuilder &operator=(const CommunicationStatusResponseBuilder &);
  flatbuffers::Offset<CommunicationStatusResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CommunicationStatusResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<CommunicationStatusResponse> CreateCommunicationStatusResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    WiFiStatus WifiStatus = WiFiStatus_AP,
    bool BLEAdvertise = false,
    flatbuffers::Offset<flatbuffers::String> BLEDeviceName = 0) {
  CommunicationStatusResponseBuilder builder_(_fbb);
  builder_.add_BLEDeviceName(BLEDeviceName);
  builder_.add_BLEAdvertise(BLEAdvertise);
  builder_.add_WifiStatus(WifiStatus);
  return builder_.Finish();
}

inline flatbuffers::Offset<CommunicationStatusResponse> CreateCommunicationStatusResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    WiFiStatus WifiStatus = WiFiStatus_AP,
    bool BLEAdvertise = false,
    const char *BLEDeviceName = nullptr) {
  return darknet7::CreateCommunicationStatusResponse(
      _fbb,
      WifiStatus,
      BLEAdvertise,
      BLEDeviceName ? _fbb.CreateString(BLEDeviceName) : 0);
}

struct ESPSystemInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HEAPSIZE = 4,
    VT_FREEHEAPSIZE = 6,
    VT_MODEL = 8,
    VT_CORES = 10,
    VT_REVISION = 12,
    VT_FEATURES = 14,
    VT_IDF_VERSION = 16
  };
  uint32_t heapSize() const {
    return GetField<uint32_t>(VT_HEAPSIZE, 0);
  }
  uint32_t freeHeapSize() const {
    return GetField<uint32_t>(VT_FREEHEAPSIZE, 0);
  }
  int32_t model() const {
    return GetField<int32_t>(VT_MODEL, 0);
  }
  int32_t cores() const {
    return GetField<int32_t>(VT_CORES, 0);
  }
  int32_t revision() const {
    return GetField<int32_t>(VT_REVISION, 0);
  }
  int32_t features() const {
    return GetField<int32_t>(VT_FEATURES, 0);
  }
  const flatbuffers::String *idf_version() const {
    return GetPointer<const flatbuffers::String *>(VT_IDF_VERSION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_HEAPSIZE) &&
           VerifyField<uint32_t>(verifier, VT_FREEHEAPSIZE) &&
           VerifyField<int32_t>(verifier, VT_MODEL) &&
           VerifyField<int32_t>(verifier, VT_CORES) &&
           VerifyField<int32_t>(verifier, VT_REVISION) &&
           VerifyField<int32_t>(verifier, VT_FEATURES) &&
           VerifyOffset(verifier, VT_IDF_VERSION) &&
           verifier.Verify(idf_version()) &&
           verifier.EndTable();
  }
};

struct ESPSystemInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_heapSize(uint32_t heapSize) {
    fbb_.AddElement<uint32_t>(ESPSystemInfo::VT_HEAPSIZE, heapSize, 0);
  }
  void add_freeHeapSize(uint32_t freeHeapSize) {
    fbb_.AddElement<uint32_t>(ESPSystemInfo::VT_FREEHEAPSIZE, freeHeapSize, 0);
  }
  void add_model(int32_t model) {
    fbb_.AddElement<int32_t>(ESPSystemInfo::VT_MODEL, model, 0);
  }
  void add_cores(int32_t cores) {
    fbb_.AddElement<int32_t>(ESPSystemInfo::VT_CORES, cores, 0);
  }
  void add_revision(int32_t revision) {
    fbb_.AddElement<int32_t>(ESPSystemInfo::VT_REVISION, revision, 0);
  }
  void add_features(int32_t features) {
    fbb_.AddElement<int32_t>(ESPSystemInfo::VT_FEATURES, features, 0);
  }
  void add_idf_version(flatbuffers::Offset<flatbuffers::String> idf_version) {
    fbb_.AddOffset(ESPSystemInfo::VT_IDF_VERSION, idf_version);
  }
  explicit ESPSystemInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ESPSystemInfoBuilder &operator=(const ESPSystemInfoBuilder &);
  flatbuffers::Offset<ESPSystemInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ESPSystemInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<ESPSystemInfo> CreateESPSystemInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t heapSize = 0,
    uint32_t freeHeapSize = 0,
    int32_t model = 0,
    int32_t cores = 0,
    int32_t revision = 0,
    int32_t features = 0,
    flatbuffers::Offset<flatbuffers::String> idf_version = 0) {
  ESPSystemInfoBuilder builder_(_fbb);
  builder_.add_idf_version(idf_version);
  builder_.add_features(features);
  builder_.add_revision(revision);
  builder_.add_cores(cores);
  builder_.add_model(model);
  builder_.add_freeHeapSize(freeHeapSize);
  builder_.add_heapSize(heapSize);
  return builder_.Finish();
}

inline flatbuffers::Offset<ESPSystemInfo> CreateESPSystemInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t heapSize = 0,
    uint32_t freeHeapSize = 0,
    int32_t model = 0,
    int32_t cores = 0,
    int32_t revision = 0,
    int32_t features = 0,
    const char *idf_version = nullptr) {
  return darknet7::CreateESPSystemInfo(
      _fbb,
      heapSize,
      freeHeapSize,
      model,
      cores,
      revision,
      features,
      idf_version ? _fbb.CreateString(idf_version) : 0);
}

struct ESPToSTM FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MSGINSTANCEID = 4,
    VT_MSG_TYPE = 6,
    VT_MSG = 8
  };
  uint32_t msgInstanceID() const {
    return GetField<uint32_t>(VT_MSGINSTANCEID, 0);
  }
  ESPToSTMAny Msg_type() const {
    return static_cast<ESPToSTMAny>(GetField<uint8_t>(VT_MSG_TYPE, 0));
  }
  const void *Msg() const {
    return GetPointer<const void *>(VT_MSG);
  }
  template<typename T> const T *Msg_as() const;
  const GenericResponse *Msg_as_GenericResponse() const {
    return Msg_type() == ESPToSTMAny_GenericResponse ? static_cast<const GenericResponse *>(Msg()) : nullptr;
  }
  const ESPSystemInfo *Msg_as_ESPSystemInfo() const {
    return Msg_type() == ESPToSTMAny_ESPSystemInfo ? static_cast<const ESPSystemInfo *>(Msg()) : nullptr;
  }
  const BLEInfectionData *Msg_as_BLEInfectionData() const {
    return Msg_type() == ESPToSTMAny_BLEInfectionData ? static_cast<const BLEInfectionData *>(Msg()) : nullptr;
  }
  const CommunicationStatusResponse *Msg_as_CommunicationStatusResponse() const {
    return Msg_type() == ESPToSTMAny_CommunicationStatusResponse ? static_cast<const CommunicationStatusResponse *>(Msg()) : nullptr;
  }
  const WiFiScanResults *Msg_as_WiFiScanResults() const {
    return Msg_type() == ESPToSTMAny_WiFiScanResults ? static_cast<const WiFiScanResults *>(Msg()) : nullptr;
  }
  const NPCInteractionResponse *Msg_as_NPCInteractionResponse() const {
    return Msg_type() == ESPToSTMAny_NPCInteractionResponse ? static_cast<const NPCInteractionResponse *>(Msg()) : nullptr;
  }
  const BadgesInArea *Msg_as_BadgesInArea() const {
    return Msg_type() == ESPToSTMAny_BadgesInArea ? static_cast<const BadgesInArea *>(Msg()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MSGINSTANCEID) &&
           VerifyField<uint8_t>(verifier, VT_MSG_TYPE) &&
           VerifyOffset(verifier, VT_MSG) &&
           VerifyESPToSTMAny(verifier, Msg(), Msg_type()) &&
           verifier.EndTable();
  }
};

template<> inline const GenericResponse *ESPToSTM::Msg_as<GenericResponse>() const {
  return Msg_as_GenericResponse();
}

template<> inline const ESPSystemInfo *ESPToSTM::Msg_as<ESPSystemInfo>() const {
  return Msg_as_ESPSystemInfo();
}

template<> inline const BLEInfectionData *ESPToSTM::Msg_as<BLEInfectionData>() const {
  return Msg_as_BLEInfectionData();
}

template<> inline const CommunicationStatusResponse *ESPToSTM::Msg_as<CommunicationStatusResponse>() const {
  return Msg_as_CommunicationStatusResponse();
}

template<> inline const WiFiScanResults *ESPToSTM::Msg_as<WiFiScanResults>() const {
  return Msg_as_WiFiScanResults();
}

template<> inline const NPCInteractionResponse *ESPToSTM::Msg_as<NPCInteractionResponse>() const {
  return Msg_as_NPCInteractionResponse();
}

template<> inline const BadgesInArea *ESPToSTM::Msg_as<BadgesInArea>() const {
  return Msg_as_BadgesInArea();
}

struct ESPToSTMBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_msgInstanceID(uint32_t msgInstanceID) {
    fbb_.AddElement<uint32_t>(ESPToSTM::VT_MSGINSTANCEID, msgInstanceID, 0);
  }
  void add_Msg_type(ESPToSTMAny Msg_type) {
    fbb_.AddElement<uint8_t>(ESPToSTM::VT_MSG_TYPE, static_cast<uint8_t>(Msg_type), 0);
  }
  void add_Msg(flatbuffers::Offset<void> Msg) {
    fbb_.AddOffset(ESPToSTM::VT_MSG, Msg);
  }
  explicit ESPToSTMBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ESPToSTMBuilder &operator=(const ESPToSTMBuilder &);
  flatbuffers::Offset<ESPToSTM> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ESPToSTM>(end);
    return o;
  }
};

inline flatbuffers::Offset<ESPToSTM> CreateESPToSTM(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t msgInstanceID = 0,
    ESPToSTMAny Msg_type = ESPToSTMAny_NONE,
    flatbuffers::Offset<void> Msg = 0) {
  ESPToSTMBuilder builder_(_fbb);
  builder_.add_Msg(Msg);
  builder_.add_msgInstanceID(msgInstanceID);
  builder_.add_Msg_type(Msg_type);
  return builder_.Finish();
}

inline bool VerifyESPToSTMAny(flatbuffers::Verifier &verifier, const void *obj, ESPToSTMAny type) {
  switch (type) {
    case ESPToSTMAny_NONE: {
      return true;
    }
    case ESPToSTMAny_GenericResponse: {
      auto ptr = reinterpret_cast<const GenericResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ESPToSTMAny_ESPSystemInfo: {
      auto ptr = reinterpret_cast<const ESPSystemInfo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ESPToSTMAny_BLEInfectionData: {
      auto ptr = reinterpret_cast<const BLEInfectionData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ESPToSTMAny_CommunicationStatusResponse: {
      auto ptr = reinterpret_cast<const CommunicationStatusResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ESPToSTMAny_WiFiScanResults: {
      auto ptr = reinterpret_cast<const WiFiScanResults *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ESPToSTMAny_NPCInteractionResponse: {
      auto ptr = reinterpret_cast<const NPCInteractionResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ESPToSTMAny_BadgesInArea: {
      auto ptr = reinterpret_cast<const BadgesInArea *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyESPToSTMAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyESPToSTMAny(
        verifier,  values->Get(i), types->GetEnum<ESPToSTMAny>(i))) {
      return false;
    }
  }
  return true;
}

inline const darknet7::ESPToSTM *GetESPToSTM(const void *buf) {
  return flatbuffers::GetRoot<darknet7::ESPToSTM>(buf);
}

inline const darknet7::ESPToSTM *GetSizePrefixedESPToSTM(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<darknet7::ESPToSTM>(buf);
}

inline bool VerifyESPToSTMBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<darknet7::ESPToSTM>(nullptr);
}

inline bool VerifySizePrefixedESPToSTMBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<darknet7::ESPToSTM>(nullptr);
}

inline void FinishESPToSTMBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<darknet7::ESPToSTM> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedESPToSTMBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<darknet7::ESPToSTM> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace darknet7

#endif  // FLATBUFFERS_GENERATED_ESPTOSTM_DARKNET7_H_
