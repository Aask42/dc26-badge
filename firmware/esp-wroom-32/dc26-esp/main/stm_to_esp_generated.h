// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STMTOESP_DARKNET7_H_
#define FLATBUFFERS_GENERATED_STMTOESP_DARKNET7_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace darknet7 {

struct SetupAP;

struct STMToESPRequest;

enum STMToESPAny {
  STMToESPAny_NONE = 0,
  STMToESPAny_SetupAP = 1,
  STMToESPAny_MIN = STMToESPAny_NONE,
  STMToESPAny_MAX = STMToESPAny_SetupAP
};

inline const STMToESPAny (&EnumValuesSTMToESPAny())[2] {
  static const STMToESPAny values[] = {
    STMToESPAny_NONE,
    STMToESPAny_SetupAP
  };
  return values;
}

inline const char * const *EnumNamesSTMToESPAny() {
  static const char * const names[] = {
    "NONE",
    "SetupAP",
    nullptr
  };
  return names;
}

inline const char *EnumNameSTMToESPAny(STMToESPAny e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesSTMToESPAny()[index];
}

template<typename T> struct STMToESPAnyTraits {
  static const STMToESPAny enum_value = STMToESPAny_NONE;
};

template<> struct STMToESPAnyTraits<SetupAP> {
  static const STMToESPAny enum_value = STMToESPAny_SetupAP;
};

bool VerifySTMToESPAny(flatbuffers::Verifier &verifier, const void *obj, STMToESPAny type);
bool VerifySTMToESPAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct SetupAP FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SSID = 4,
    VT_PASSWD = 6,
    VT_MODE = 8
  };
  const flatbuffers::String *ssid() const {
    return GetPointer<const flatbuffers::String *>(VT_SSID);
  }
  const flatbuffers::String *passwd() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWD);
  }
  WifiMode mode() const {
    return static_cast<WifiMode>(GetField<int8_t>(VT_MODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SSID) &&
           verifier.Verify(ssid()) &&
           VerifyOffset(verifier, VT_PASSWD) &&
           verifier.Verify(passwd()) &&
           VerifyField<int8_t>(verifier, VT_MODE) &&
           verifier.EndTable();
  }
};

struct SetupAPBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ssid(flatbuffers::Offset<flatbuffers::String> ssid) {
    fbb_.AddOffset(SetupAP::VT_SSID, ssid);
  }
  void add_passwd(flatbuffers::Offset<flatbuffers::String> passwd) {
    fbb_.AddOffset(SetupAP::VT_PASSWD, passwd);
  }
  void add_mode(WifiMode mode) {
    fbb_.AddElement<int8_t>(SetupAP::VT_MODE, static_cast<int8_t>(mode), 0);
  }
  explicit SetupAPBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SetupAPBuilder &operator=(const SetupAPBuilder &);
  flatbuffers::Offset<SetupAP> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetupAP>(end);
    return o;
  }
};

inline flatbuffers::Offset<SetupAP> CreateSetupAP(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> ssid = 0,
    flatbuffers::Offset<flatbuffers::String> passwd = 0,
    WifiMode mode = WifiMode_OPEN) {
  SetupAPBuilder builder_(_fbb);
  builder_.add_passwd(passwd);
  builder_.add_ssid(ssid);
  builder_.add_mode(mode);
  return builder_.Finish();
}

inline flatbuffers::Offset<SetupAP> CreateSetupAPDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *ssid = nullptr,
    const char *passwd = nullptr,
    WifiMode mode = WifiMode_OPEN) {
  return darknet7::CreateSetupAP(
      _fbb,
      ssid ? _fbb.CreateString(ssid) : 0,
      passwd ? _fbb.CreateString(passwd) : 0,
      mode);
}

struct STMToESPRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MTYPE = 4,
    VT_MSG_TYPE = 6,
    VT_MSG = 8
  };
  MsgType MType() const {
    return static_cast<MsgType>(GetField<int8_t>(VT_MTYPE, 0));
  }
  STMToESPAny Msg_type() const {
    return static_cast<STMToESPAny>(GetField<uint8_t>(VT_MSG_TYPE, 0));
  }
  const void *Msg() const {
    return GetPointer<const void *>(VT_MSG);
  }
  template<typename T> const T *Msg_as() const;
  const SetupAP *Msg_as_SetupAP() const {
    return Msg_type() == STMToESPAny_SetupAP ? static_cast<const SetupAP *>(Msg()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_MTYPE) &&
           VerifyField<uint8_t>(verifier, VT_MSG_TYPE) &&
           VerifyOffset(verifier, VT_MSG) &&
           VerifySTMToESPAny(verifier, Msg(), Msg_type()) &&
           verifier.EndTable();
  }
};

template<> inline const SetupAP *STMToESPRequest::Msg_as<SetupAP>() const {
  return Msg_as_SetupAP();
}

struct STMToESPRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_MType(MsgType MType) {
    fbb_.AddElement<int8_t>(STMToESPRequest::VT_MTYPE, static_cast<int8_t>(MType), 0);
  }
  void add_Msg_type(STMToESPAny Msg_type) {
    fbb_.AddElement<uint8_t>(STMToESPRequest::VT_MSG_TYPE, static_cast<uint8_t>(Msg_type), 0);
  }
  void add_Msg(flatbuffers::Offset<void> Msg) {
    fbb_.AddOffset(STMToESPRequest::VT_MSG, Msg);
  }
  explicit STMToESPRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  STMToESPRequestBuilder &operator=(const STMToESPRequestBuilder &);
  flatbuffers::Offset<STMToESPRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<STMToESPRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<STMToESPRequest> CreateSTMToESPRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    MsgType MType = MsgType_RESERVED,
    STMToESPAny Msg_type = STMToESPAny_NONE,
    flatbuffers::Offset<void> Msg = 0) {
  STMToESPRequestBuilder builder_(_fbb);
  builder_.add_Msg(Msg);
  builder_.add_Msg_type(Msg_type);
  builder_.add_MType(MType);
  return builder_.Finish();
}

inline bool VerifySTMToESPAny(flatbuffers::Verifier &verifier, const void *obj, STMToESPAny type) {
  switch (type) {
    case STMToESPAny_NONE: {
      return true;
    }
    case STMToESPAny_SetupAP: {
      auto ptr = reinterpret_cast<const SetupAP *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifySTMToESPAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifySTMToESPAny(
        verifier,  values->Get(i), types->GetEnum<STMToESPAny>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace darknet7

#endif  // FLATBUFFERS_GENERATED_STMTOESP_DARKNET7_H_
